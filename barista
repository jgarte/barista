#!/bin/env janet
(import neil/tell :prefix "")
(import neil/utils)
(import path)
(import curl)
(import json)


(var weather "")
(ev/spawn
  (def b @"")
  (def c (curl/easy/init))
  (def cp |(-> (comptime (os/getenv "HOME")) (path/join $) slurp string/trim))
  (:setopt c
           :url (string "api.openweathermap.org/data/2.5/weather?q=" (cp "/.config/barista/place")
                        "&units=metric&appid=" (cp "/.config/barista/wmp"))
           :write-function |(buffer/push-string b $)
           :no-progress? true)

  (forever
    (def res (:perform c))
    (when (not (zero? res))
      (error (string "Cannot fetch: " (curl/easy/strerror res))))
    (def m ((json/decode b) "main"))
    (set weather (string/format "\ufa8f %.1f °C | %.1f °C | %i%% | %i hPa" (m "feels_like") (m "temp") (m "humidity") (m "pressure")))
    (buffer/clear b)
    (ev/sleep 900)))

(var ts "")
(ev/spawn
  (def days ["ne" "po" "ůt" "st" "čt" "pá" "so"])

  (forever
    (def n (os/date (os/time) true))
    (set ts
         (string/format " \uf5ef %s %i/%s/%s %i:%s:%s"
                        (days (n :week-day))
                        (n :year)
                        (utils/pad (inc (n :month)))
                        (utils/pad (inc (n :month-day)))
                        (n :hours)
                        (utils/pad (n :minutes))
                        (utils/pad (n :seconds))))
    (ev/sleep 1)))

(var netp "")
(ev/spawn
  (forever
    (set netp
         (string
           "\uf700 "
           (string/join (seq [[a p] :pairs {"ocean-one" 443 "ocean-three" 443 "neil" 6660}]
                          (match (protect (with [c (net/connect (string a ".laststar.work") p)]))
                            [true _] "\uf00c"
                            [false _] "\uf00d")) " ")
           " "))
    (ev/sleep 60)))

(var task "Connecting")
(ev/spawn
  (tell
    (forever
      (set task (string "\uf5d6 "
                        (match
                          (protect
                            (if-let [r (:task/running neil)]
                              (let [[rid {:name n :project pid :work-intervals iw}] r
                                    {:name p :client cid} (:by-id neil pid)
                                    {:abbrev c} (:by-id neil cid)
                                    {:start s :note t} (last iw)]
                                (string/format "\uf04b %s $%s @%s #%s %s" (utils/durf (- (os/time) s)) c p rid n))
                              (let [[rid {:name n :project pid :work-intervals iw}] (:task/last-ran neil)
                                    {:name p :client cid} (:by-id neil pid)
                                    {:abbrev c} (:by-id neil cid)
                                    dur (reduce (fn [r x] (+ r (- (x :end) (x :start)))) 0 iw)]
                                (string/format "\uf04c %s $%s @%s #%s %s" (utils/durf dur) c p rid n))))
                          [true m] m
                          [false e] "Problems!!!")))
      (ev/sleep 1))))

(var batt "")
(var light "")
(defn main [_ &opt ntb]
  (default ntb false)
  (ev/spawn
    (when ntb
      (ev/spawn
        (def lp |(-> "/sys/class/backlight/intel_backlight/" (path/join $) slurp string/trim scan-number))
        (forever
          (set light
               (->> (lp "max_brightness") (/ (lp "actual_brightness")) (* 100) math/floor (string "\uf5dd ")))
          (ev/sleep 1)))
      (ev/spawn
        (forever
          (set batt (->> "/sys/class/power_supply/BAT0/capacity" slurp string/trim (string "\uf578 ")))
          (ev/sleep 60))))
    (forever
      (if ntb
        (printf "%s %s %s%% %s%% %s %s" weather task batt light ts netp)
        (printf "%s %s %s %s" weather task ts netp))
      (flush)
      (ev/sleep 1))))
