#!/bin/env janet
(import neil/tell :prefix "")
(import neil/utils)
(import path)
(import curl)
(import json)

# state
(var weather "")
(var ts "")
(var netp "")
(var task "Connecting")
(var batt "")
(var light "")
(var mem "")
(var cpu "")

# async
(ev/spawn
  (def b @"")
  (def c (curl/easy/init))
  (def cp |(-> (comptime (os/getenv "HOME")) (path/join $) slurp string/trim))
  (:setopt c
           :url (string "api.openweathermap.org/data/2.5/weather?q=" (cp "/.config/barista/place")
                        "&units=metric&appid=" (cp "/.config/barista/wmp"))
           :write-function |(buffer/push-string b $)
           :no-progress? true)

  (forever
    (def res (:perform c))
    (when (not (zero? res))
      (error (string "Cannot fetch: " (curl/easy/strerror res))))
    (def {"feels_like" f "temp" t "humidity" h "pressure" p} ((json/decode b) "main"))
    (set weather (string/format "\ufa8f %.1f °C | %.1f °C | %i%% | %i hPa" f t h p))
    (buffer/clear b)
    (ev/sleep 900)))

(ev/spawn
  (def days ["ne" "po" "ůt" "st" "čt" "pá" "so"])

  (forever
    (def n (os/date (os/time) true))
    (set ts
         (string/format " \uf5ef %s %i/%s/%s %i:%s:%s"
                        (days (n :week-day))
                        (n :year)
                        (utils/pad (inc (n :month)))
                        (utils/pad (inc (n :month-day)))
                        (n :hours)
                        (utils/pad (n :minutes))
                        (utils/pad (n :seconds))))
    (ev/sleep 1)))

(ev/spawn
  (forever
    (set netp
         (string
           "\uf700 "
           (string/join (seq [[a p] :pairs {"ocean-one" 443 "ocean-three" 443 "neil" 6660}]
                          (match (protect (with [c (net/connect (string a ".laststar.work") p)]))
                            [true _] "\uf00c"
                            [false _] "\uf00d")) " ")
           " "))
    (ev/sleep 60)))

(ev/spawn
  (tell
    (forever
      (set task (string "\uf5d6 "
                        (match
                          (protect
                            (if-let [r (:task/running neil)]
                              (let [[rid {:name n :project pid :work-intervals iw}] r
                                    {:name p :client cid} (:by-id neil pid)
                                    {:abbrev c} (:by-id neil cid)
                                    {:start s :note t} (last iw)]
                                (string/format "\uf04b %s $%s @%s #%s %s" (utils/durf (- (os/time) s)) c p rid n))
                              (let [[rid {:name n :project pid :work-intervals iw}] (:task/last-ran neil)
                                    {:name p :client cid} (:by-id neil pid)
                                    {:abbrev c} (:by-id neil cid)
                                    dur (reduce (fn [r x] (+ r (- (x :end) (x :start)))) 0 iw)]
                                (string/format "\uf04c %s $%s @%s #%s %s" (utils/durf dur) c p rid n))))
                          [true m] m
                          [false e] "Problems!!!")))
      (ev/sleep 1))))

(ev/spawn
  (defn parse-cpu []
    (def [user nice system idle iowait irq softirq steal
          guest guest_nice]
      (->> "/proc/stat" slurp
           (peg/match (comptime (peg/compile '(* (thru "cpu ") (repeat 20 (+ ':d+ (? :s)))))))
           (map scan-number)))
    (def used (+ user nice system irq softirq steal guest guest_nice))
    [used (+ used idle iowait)])
  (var [old-used old-total] (parse-cpu))

  (forever
    (ev/sleep 1)
    (set mem
         (string/format "%i%%"
                        (->> "/proc/meminfo"
                             slurp
                             (peg/match '(some (+ (* (thru "MemTotal:") :s+ ':d+ " kB") (* (thru "MemAvailable:") :s+ ':d+ " kB"))))
                             reverse
                             (map scan-number)
                             (apply /)
                             (- 1)
                             (* 100)
                             math/floor)))
    (def [used total] (parse-cpu))
    (def usage (* 100 (/ (- used old-used)
                         (- total old-total))))
    (set cpu (string/format "\ue28c %i%%" (math/round usage)))
    (set old-used used)
    (set old-total total)))


(defn main [_ &opt ntb]
  (default ntb false)
  (ev/spawn
    (when ntb
      (ev/spawn
        (def lp |(-> "/sys/class/backlight/intel_backlight/" (path/join $) slurp string/trim scan-number))
        (forever
          (set light
               (->> (lp "max_brightness") (/ (lp "actual_brightness")) (* 100) math/floor (string/format "\uf5dd %i%%")))
          (ev/sleep 1)))
      (ev/spawn
        (forever
          (set batt (->> "/sys/class/power_supply/BAT0/capacity" slurp string/trim (string/format "\uf578 %s%%")))
          (ev/sleep 60))))
    (forever
      (def s (os/clock))
      (if ntb
        (printf "%s %s %s %s %s %s %s %s" weather task batt light cpu mem ts netp)
        (printf "%s %s %s %s %s %s" weather task cpu mem ts netp))
      (flush)
      (def dur (- (os/clock) s))
      (when (< dur 1) (ev/sleep (- 1 dur))))))
