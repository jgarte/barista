#!/bin/env janet
(import neil/tell :prefix "")
(import neil/utils)

(defn capt [label]
  ~(* (some (if-not ,label 1)) ,label :s+ '(some (if-not "\n" 1))))

(def capg
  ~(* ,(capt "state:")
      ,(capt "energy-rate:")
      (? ,(capt '(* "time to " (<- (+ "empty" "full")) ":")))
      ,(capt "percentage:")))

(def days ["ne" "po" "ůt" "st" "čt" "pá" "so"])


(defn main [_ &opt ntb]
  (default ntb false)
  (forever
    (def start (os/clock))
    (def n (os/date (os/time) true))
    (def ts (string/format "%s %i/%s/%s %i:%s:%s"
                           (days (n :week-day))
                           (n :year)
                           (utils/pad (inc (n :month)))
                           (utils/pad (inc (n :month-day)))
                           (n :hours)
                           (utils/pad (n :minutes))
                           (utils/pad (n :seconds))))
    (def task
      (match
        (protect
          (tell
            (if-let [r (:task/running neil)]
              (let [[rid {:name n :project pid :work-intervals iw}] r
                    {:name p :client cid} (:by-id neil pid)
                    {:abbrev c} (:by-id neil cid)
                    {:start s :note t} (last iw)]
                (string/format "\u25b6 %s $%s @%s - #%s %s" (utils/durf (- (os/time) s)) c p rid n))
              (let [[rid {:name n :project pid :work-intervals iw}] (:task/last-ran neil)
                    {:name p :client cid} (:by-id neil pid)
                    {:abbrev c} (:by-id neil cid)
                    dur (reduce (fn [r x] (+ r (- (x :end) (x :start)))) 0 iw)]
                (string/format "\u25fc %s $%s @%s #%s - %s" (utils/durf dur) c p rid n)))))
        [true m] m
        [false _] "Office err!"))
    (if ntb
      (let [mlight (with [f (file/open "/sys/class/backlight/intel_backlight/max_brightness")] (scan-number (string/trim (:read f :all))))
            alight (with [f (file/open "/sys/class/backlight/intel_backlight/actual_brightness")] (scan-number (string/trim (:read f :all))))
            light (math/floor (* 100 (/ alight mlight)))
            b (with [f (file/open "/sys/class/power_supply/BAT0/capacity")] (string/trim (:read f :all)))
            batt (string/format "%s%%" b)]
        (print task " \uf5dd " light "% \uf578 " batt " \uf5ef " ts))
      (print task " \u25F7 " ts))
    (flush)
    (def dur (- (os/clock) start))
    (unless (>= dur 1) (os/sleep (- 1 dur)))))
